<a href="http://en.wikipedia.org/wiki/File:Alonzo_Church.jpg"><%= image_tag "Alonzo_Church.jpg", :class => "float" %></a>

<p>Lambda calculus is a system of symbolic manipulation. We write certain symbols in a certain order, and then we evaluate them using a single rule. This rule, called <strong>beta reduction</strong>, tells us how to shuffle the symbols around. In the end we have a different lambda expression. And in the process, we calculated something! The most astonishing fact about lambda calculus is that mathematicians have shown that you can use beta reduction to calculate <em>anything</em>.</p>

<p>The system was invented in 1936 &mdash; before any computers existed. The creator, a man named Alonzo Church, came up with lambda calculus when thinking about logic.</p>

<p>The system was later used to build programming languages classified as <em>functional</em>. Primary examples are Lisp and Haskell. These langauges have influenced most other programming langauges, which grew to include functional programming features.</p>